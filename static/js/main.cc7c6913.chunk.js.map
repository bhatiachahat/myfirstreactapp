{"version":3,"sources":["components/Tableheader.js","components/Tablebody.js","components/Table.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Tableheader","react_default","a","createElement","Component","Tablebody","_this","this","array","props","characterData","map","row","index","key","name","job","class","onClick","removeCharacter","Table","console","log","data","Tableheader_Tableheader","Tablebody_Tablebody","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","target","value","setState","defineProperty","toUpperCase","submitForm","preventDefault","state","handleSubmit","initialState","onSubmit","className","for","autofocus","autocomplete","type","onChange","placeholder","App","newcharacters","character","filter","i","concat","toConsumableArray","Table_Table","Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc7c6913.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Tableheader extends Component {\r\n    render() {\r\n        return (\r\n          <thead>\r\n          <tr>\r\n            <th >NAME</th>\r\n            <th >JOB</th>\r\n            <th >OPTIONS</th>\r\n            \r\n          </tr>\r\n        </thead>\r\n                   \r\n                \r\n       \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Tablebody extends Component {\r\n    render() {\r\n        var characterData=this.props.characterData;\r\n    \r\n         let array=characterData.map((row,index)=>{\r\n       \r\n            return (\r\n            \r\n    \r\n              <tr key={index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td>\r\n                    <button  class=\"btn btn-primary\" onClick={\r\n                        ()=>{this.props.removeCharacter(index)}\r\n                    }>Delete\r\n\r\n                    </button>\r\n                </td>\r\n              </tr>\r\n           \r\n           \r\n            )\r\n        \r\n   })\r\n    return(\r\n    <tbody>{array}</tbody>\r\n)\r\n       \r\n    }\r\n   \r\n}\r\n","import React, { Component } from 'react'\r\nimport Tableheader from './Tableheader'\r\nimport Tablebody from './Tablebody'\r\n\r\nexport default class Table extends Component {\r\n    \r\n    render() {\r\n        \r\n        console.log(this.props.data);\r\n        var characterData=this.props.data;\r\n        var removeCharacter=this.props.removeCharacter;\r\n       \r\n        return (\r\n            <table class=\"table\">\r\n  <Tableheader />\r\n  <Tablebody characterData={characterData} removeCharacter={removeCharacter} />\r\n  \r\n</table>\r\n           \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Form extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n   \r\n    this.initialState={\r\n        name:'',\r\n        job:''\r\n    }\r\n    this.state=this.initialState;\r\n    // this.handleChange = this.handleChange.bind(this);\r\n    // this.handleSubmit=this.handleSubmit.bind(this);\r\n}\r\nhandleChange=(event)=>{\r\n   console.log(\"event.target.value\",event.target.value);\r\n   \r\n\r\n    this.setState({\r\n        [event.target.name]:event.target.value.toUpperCase()\r\n       \r\n        \r\n    })\r\n  \r\n\r\n}\r\nsubmitForm = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"in submit form\",this.state);\r\n    console.log(\"before calling handlesubmit\");\r\n    this.props.handleSubmit(this.state)\r\n    console.log(\"afetr calling handle submit\");\r\n   this.setState(this.initialState)\r\n  console.log(\"cleared\");\r\n  }\r\n\r\n    render() {\r\n     \r\n        return (\r\n            \r\n            <form onSubmit={this.submitForm}>\r\n               <div className=\"form-group\">\r\n    <label for=\"exampleInputEmail1\">Name of the employee</label>\r\n    <input autofocus=\"on\" autocomplete=\"off\" type=\"text\" className=\"form-control\" name=\"name\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange} placeholder=\"Type Name\" />\r\n    \r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label for=\"exampleInputEmail1\">Employee designation</label>\r\n    <input autocomplete=\"off\" type=\"text\" className=\"form-control\" name=\"job\"\r\n              value={this.state.job}\r\n              onChange={this.handleChange} placeholder=\"Type designation\" />\r\n    \r\n  </div>\r\n  \r\n \r\n  <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n</form>\r\n           \r\n        )\r\n    }\r\n}\r\n","\nimport React, { Component } from 'react'\nimport Table from './components/Table'\nimport Form from './components/Form'\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(){\n    super();\n    \n    this.state={\n      character:[]\n    }\n  }\n  removeCharacter=index=>{\n   \n    \n    \n    console.log(index);\n    console.log(\"inside remove character\");\n   let newarray=this.state.character;\n  let newcharacters= newarray.filter((character, i) => {\n        return i !== index\n      })\n    this.setState({ character:newcharacters  }, () => {\n      console.log(this.state.character);\n    }); \n   }\n   handleSubmit=(character)=>{\n\n  \n   \n    console.log(\"inside onSubmit\",character);\n\n    console.log(\"initial charcters\",this.state.character);\n    this.setState({ character: [...this.state.character, character]  }, () => {\n        console.log(\"final characters\",this.state.character);\n      }); \n \n\n}\n   \n  render() {\n    return (\n      <div className=\"container\">\n         <h1>All Employees</h1>\n        \n         <Table data={this.state.character} removeCharacter={this.removeCharacter}/>\n         \n       \n        <br/>\n        <hr/>\n        <h1>Add New Employee</h1>\n        <div class=\"jumbotron\">\n        <Form   handleSubmit={this.handleSubmit} />\n        </div>\n       \n        \n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}